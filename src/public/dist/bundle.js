/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/public/js/app.js":
/*!******************************!*\
  !*** ./src/public/js/app.js ***!
  \******************************/
/***/ (() => {

eval("document.addEventListener(\"DOMContentLoaded\", () => {\r\n  const sidebarToggle = document.getElementById(\"sidebarToggle\");\r\n  const sidebar = document.getElementById(\"sidebar\");\r\n  const themeToggleBtn = document.getElementById(\"themeToggle\");\r\n\r\n  sidebarToggle.addEventListener(\"click\", () => {\r\n    sidebar.classList.toggle(\"-translate-x-full\");\r\n  });\r\n\r\n  themeToggleBtn.addEventListener(\"click\", () => {\r\n    document.documentElement.classList.toggle(\"dark\");\r\n  });\r\n\r\n  const userAvatarButton = document.getElementById(\"avatar\");\r\n  const dropdownMenu = document.getElementById(\"dropdown\");\r\n\r\n  userAvatarButton.addEventListener(\"click\", () => {\r\n    dropdownMenu.classList.toggle(\"hidden\");\r\n  });\r\n});\r\n\r\n// ### Start Article Form ###\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  let planCount = 1; // Используется для создания уникальных имен\r\n\r\n  document.getElementById(\"addPlanButton\").addEventListener(\"click\", () => {\r\n    planCount++;\r\n    const planBlock = document.createElement(\"div\");\r\n    planBlock.classList.add(\"plan-block\", \"mb-4\");\r\n    planBlock.innerHTML = `\r\n        <input type=\"text\" name=\"plan_title_${planCount}\" class=\"border p-2 w-full mb-2\" placeholder=\"Заголовок плана статьи №${planCount}\">\r\n        <textarea name=\"plan_content_${planCount}\" class=\"border p-2 w-full\" placeholder=\"Контент плана статьи №${planCount}\"></textarea>\r\n      `;\r\n    document.getElementById(\"plans\").appendChild(planBlock);\r\n  });\r\n});\r\n\r\n// document.getElementById(\"saveButton\").addEventListener(\"click\", async () => {\r\n//   const formData = {\r\n//     title: document.getElementById(\"title\").value,\r\n//     description: document.getElementById(\"description\").value,\r\n//     category: document.getElementById(\"category\").value,\r\n//     createdate: document.getElementById(\"createdate\").value,\r\n//     plan: {}, // План статьи будет заполняться далее\r\n//     img_data: null // Изображения также будут заполняться далее\r\n//   };\r\n\r\n//   // Заполнение данных плана статьи\r\n//   const planBlocks = document.querySelectorAll(\".plan-block\");\r\n//   let planData = Array.from(planBlocks).map(planBlock => ({\r\n//     title: planBlock.querySelector(\"input\").value,\r\n//     content: planBlock.querySelector(\"textarea\").value\r\n//   }));\r\n\r\n//   let planJSON = JSON.stringify(planData);\r\n\r\n//   formData.plan = planJSON;\r\n\r\n//   // Заполнение данных изображений\r\n//   const imgDataInput = document.getElementById(\"img_data\");\r\n//   if (imgDataInput.files.length > 0) {\r\n//     const imgDataArray = [];\r\n//     for (const file of imgDataInput.files) {\r\n//       const reader = new FileReader();\r\n//       reader.readAsArrayBuffer(file);\r\n//       reader.onload = () => {\r\n//         const imgData = Array.from(new Uint8Array(reader.result));\r\n//         imgDataArray.push(imgData);\r\n//         if (imgDataArray.length === imgDataInput.files.length) {\r\n//           formData.img_data = imgDataArray;\r\n//           sendDataToServer(formData);\r\n//         }\r\n//       };\r\n//     }\r\n//   } else {\r\n//     sendDataToServer(formData);\r\n//   }\r\n// });\r\n\r\n// async function sendDataToServer(formData) {\r\n//   try {\r\n//     const form = new FormData();\r\n//     for (const key in formData) {\r\n//       form.append(key, formData[key]);\r\n//     }\r\n\r\n//     console.log(form);\r\n\r\n//     const response = await fetch('/api/createarticles', {\r\n//       method: 'POST',\r\n//       body: form\r\n//     });\r\n\r\n//     // Обработка ответа...\r\n//   } catch (error) {\r\n//     console.error('Error saving article:', error);\r\n//   }\r\n//   console.log(formData);\r\n// }\r\n\r\n\r\ndocument.getElementById(\"saveButton\").addEventListener(\"click\", async () => {\r\n  const formData = new FormData();\r\n\r\n  const planBlocks = document.querySelectorAll(\".plan-block\");\r\n  let planData = Array.from(planBlocks).map(planBlock => ({\r\n    title: planBlock.querySelector(\"input\").value,\r\n    content: planBlock.querySelector(\"textarea\").value\r\n  }));\r\n  formData.append('img_data', document.getElementById(\"img_data\").files[0]); // Добавляем файл в FormData\r\n\r\n  // Добавьте остальные поля формы в formData\r\n  formData.append('title', document.getElementById(\"title\").value);\r\n  formData.append('description', document.getElementById(\"description\").value);\r\n  formData.append('category', document.getElementById(\"category\").value);\r\n  formData.append('createdate', document.getElementById(\"createdate\").value);\r\n  formData.append('plan', JSON.stringify(planData));\r\n  \r\n  // Отправляем данные на сервер\r\n  try {\r\n    const response = await fetch('/api/createarticles', {\r\n      method: 'POST',\r\n      body: formData\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      console.log('Article saved with ID:', data.id);\r\n    } else {\r\n      console.error('Failed to save article:', response.statusText);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error saving article:', error);\r\n  }\r\n});\n\n//# sourceURL=webpack://result-back/./src/public/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/public/js/app.js"]();
/******/ 	
/******/ })()
;